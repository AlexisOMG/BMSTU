(define (count x xs)
  (define (cnt x xs i)
    (if (null? xs)
        i
        (if (equal? x (car xs))
            (cnt x (cdr xs) (+ i 1))
            (cnt x (cdr xs) i))))
  (cnt x xs 0))

(define (delete pred? xs)
  (if (null? xs)
      '()
      (append
       (if (list? (car xs))
           (delete pred? (car xs))
           (if (not (pred? (car xs)))
               (list (car xs))
               '()))
       (delete pred? (cdr xs)))))

(define (iterate f x n)
  (if (= n 0)
      '()
      (cons x (iterate f (f x) (- n 1))))) ;append -> cons

(define (intersperse e xs)
  (if (null? xs)
      '()
      (append
       (list (car xs))
       (if (null? (cdr xs))
           '()
           (list e))
       (intersperse e (cdr xs)))))

(define (any? pred? xs)
  (and
   (not(null? xs))
   (or (pred? (car xs)) (any? pred? (cdr xs)))))

(define (all? pred? xs)
  (or
   (null? xs)
   (and (pred? (car xs)) (all? pred? (cdr xs)))))

(define (o . xs)
  (if (null? xs)
      (lambda (a) a)
      (lambda (a) ((car xs) ((apply o (cdr xs)) a)))))

(define (f x) (* x 2))
(define (g x) (* x 3))
(define (h x) (- x))

(and (display "(count 'a '(a b c a)) => ") (count 'a '(a b c a)))
(and (display "(count 'b '(a c d)) => ") (count 'b '(a c d)))
(and (display "(count 'a '()) => ") (count 'a '()))
(and (display "\n(delete even? '(0 1 2 3)) => ") (delete even? '(0 1 2 3)))
(and (display "(delete even? '(0 2 4 6)) => ") (delete even? '(0 2 4 6)))
(and (display "(delete even? '(1 3 5 7)) => ") (delete even? '(1 3 5 7)))
(and (display "(delete even? '()) => ") (delete even? '()))
(and (display "\n(iterate (lambda (x) (* 2 x)) 1 6) => ") (iterate (lambda (x) (* 2 x)) 1 6))
(and (display "(iterate (lambda (x) (* 2 x)) 1 1) => ") (iterate (lambda (x) (* 2 x)) 1 1))
(and (display "(iterate (lambda (x) (* 2 x)) 1 0) => ") (iterate (lambda (x) (* 2 x)) 1 0))
(and (display "\n(intersperse 'x '(1 2 3 4)) => ") (intersperse 'x '(1 2 3 4)))
(and (display "(intersperse 'x '(1 2)) => ") (intersperse 'x '(1 2)))
(and (display "(intersperse 'x '(1)) => ") (intersperse 'x '(1)))
(and (display "(intersperse 'x '()) => ") (intersperse 'x '()))
(and (display "\n(any? odd? '(1 3 5 7)) => ") (any? odd? '(1 3 5 7)))
(and (display "(any? odd? '(0 1 2 3)) => ") (any? odd? '(0 1 2 3)))
(and (display "(any? odd? '(0 2 4 6)) => ") (any? odd? '(0 2 4 6)))
(and (display "(any? odd? '()) => ") (any? odd? '()))
(and (display "\n(all? odd? '(1 3 5 7)) => ") (all? odd? '(1 3 5 7)))
(and (display "(all? odd? '(0 1 2 3)) => ") (all? odd? '(0 1 2 3)))
(and (display "(all? odd? '(0 2 4 6)) => ") (all? odd? '(0 2 4 6)))
(and (display "(all? odd? '()) => ") (all? odd? '()))
(and (display "\n((o f g h) 1) => ") ((o f g h) 1))
(and (display "((o f g) 1) => ") ((o f g) 1))
(and (display "((o h) 1) => ") ((o h) 1))
(and (display "((o) 1) => ") ((o) 1))